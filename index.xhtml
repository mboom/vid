<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="nl" lang="nl">
    <head>
        <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons"/>
        <link rel="stylesheet" href="https://code.getmdl.io/1.3.0/material.indigo-pink.min.css"/>

        <meta charset="UTF-8"/>
        <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
        <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0"/>

        <style>
            video {
                height: 360px;
                width: 640px;
            }
        </style>
        <title>Overview</title>
    </head>


    <body>
        <div class="mdl-layout mdl-js-layout mdl-layout--fixed-header">
            <div class="mdl-layout__header mdl-layout__header--waterfall">
                <div class="mdl-layout__header-row">
                    <div class="mdl-layout-spacer"></div>
                    <button class="mdl-button mdl-js-button mdl-button--icon mdl-js-ripple-effect" id="more-button">
                        <i class="material-icons">more_vert</i>
                    </button>
                    <ul class="mdl-menu mdl-js-menu mdl-menu--bottom-right mdl-js-ripple-effect" for="more-button">
                        <li class="mdl-menu__item">VID Nederland B.V.</li>
                        <li class="mdl-menu__item">Gemeente Rotterdam</li>
                        <li disabled="" class="mdl-menu__item">Twente Mobiel</li>
                        <li class="mdl-menu__item">Alles</li>
                    </ul>
                </div>
            </div>
        </div>



        <div class="mdl-grid">
            <div class="mdl-cell mdl-cell--4-col"></div>
            <div class="mdl-cell mdl-cell--4-col"></div>
            <div class="mdl-cell mdl-cell--4-col"></div>
            <div class="mdl-cell mdl-cell--4-col"></div>
            <div class="mdl-cell mdl-cell--4-col"></div>
            <div class="mdl-cell mdl-cell--4-col"></div>
            <div class="mdl-cell mdl-cell--4-col"></div>
            <div class="mdl-cell mdl-cell--4-col"></div>
        </div>



        <script
          src="https://code.jquery.com/jquery-3.2.1.min.js"
          integrity="sha256-k2WSCIexGzOj3Euiig+TlR8gA0EmPjuc79OEeY5L45g="
          crossorigin="anonymous"></script>
        <script src="https://cdn.dashjs.org/latest/dash.all.min.js"></script>
        <script defer="" src="https://code.getmdl.io/1.3.0/material.min.js"></script>
        <script src="providers.js"></script>

  

        <script>
            //<![CDATA[
                var cameras = {
                    "list": [],


                    "selectCamera": function (id) {
                        for (let camera of this.list) {
                            if (camera.id === id) {
                                return camera;
                            }
                        }
                        throw new Error("camera not found");
                    },


                    "filter": function(key, value) {
                        var result = [];
                        for (let camera of this.list) {
                            if (typeof camera[key] !== "undefined" && camera[key] === value) {
                                result.push(camera);
                            }
                        }

                        return result;
                    },


                    "checkStream": function (id, stream) {
                        var cam = this.selectCamera(id);
                        if (stream === "live" && (typeof cam.stream === "undefined" || cam.stream === "")) {
                            return false;
                        }
                        return providers.checkStream(cam.provider, stream);
                    },


                    "checkSource": function (id, stream, protocol) {
                        return this.checkStream(id, stream) && providers.checkSource(this.selectCamera(id).provider, stream, protocol);
                    },


                    "getStream": function (id, stream, protocol) {
                        var source = id;
                        var cam = this.selectCamera(id);
                        if (stream === "live") {
                            source = cam.stream;
                        }
                        return providers.selectSource(cam.provider, stream, protocol).location(source);
                    }
                };


                $.getJSON("cameras.json", function (data) {
                    cameras.list = data;
                });
            //]]>
        </script>

  
          
        <script>
            var cctv = {
                addLive: function (src) {
                    var video = document.createElement("video");
                    video.setAttribute("autoplay", "");
                    video.setAttribute("controls", "");
                    video.setAttribute("data-dashjs-player", "");
                    video.setAttribute("src", src);
                    document.querySelector("body").appendChild(video);
                },


                addStatic: function (src) {
                    var img = document.createElement("img");
                    img.setAttribute("src", src());

                    var reload = function () {
                        setTimeout(reload, 2000);
                        img.setAttribute("src", src());
                    }
                    img.addEventListener("load", reload);

                    document.querySelector("body").appendChild(img);
                },


                addCamera: function (id) {
                    if (cameras.checkSource(id, "live", "HTTP Live Streaming")) {
                        this.addLive(cameras.getStream(id, "live", "HTTP Live Streaming"));
                    } else if (cameras.checkSource(id, "static", "image")) {
                        this.addStatic(function () { return cameras.getStream(id, "static", "image"); });
                    }
                },

                addList: function (list) {
                    for (camera of list) {
                        this.addCamera(camera.id);
                    }
                }
            };
        </script>
  
  
  
        <script>
            //<![CDATA[
                function testCCTV() {
                    for (var i = 0; i < 5; ++i) {
                        cctv.addLive(cameras.getStream(cameras.list[i].id, "live", "HTTP Live Streaming"));
                    }
                }

                function loadAll() {
                    for (let camera of cameras.list) {
                        cctv.addCamera(camera.id);
                    }
                }

                function loadVID() {
                    cctv.addList(cameras.filter("manager", "VID Nederland B.V."));
                }

                function loadGRT() {
                    cctv.addList(cameras.filter("manager", "Gemeente Rotterdam"));
                }

                function loadTM() {
                    cctv.addList(cameras.filter("manager", "Twente Mobiel"));
                }
            //]]>
        </script>
    </body>
</html>
